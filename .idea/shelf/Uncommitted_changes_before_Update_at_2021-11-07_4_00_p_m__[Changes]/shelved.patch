Index: projet-equipe14/src/Verification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import net.sf.json.JSONArray;\r\nimport net.sf.json.JSONObject;\r\n\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Date;\r\nimport java.util.*;\r\n\r\npublic class Verification {\r\n    private FormationContinue formationAVerifier;\r\n    private JSONObject fichierErreur;\r\n    private ArrayList<String> categorieValide = new ArrayList<String>();\r\n\r\n    private static final String[] CATEGORIE = {\"cours\", \"atelier\", \"séminaire\",\r\n            \"colloque\", \"conférence\", \"lecture dirigée\", \"présentation\",\r\n            \"groupe de discussion\", \"projet de recherche\",\r\n            \"rédaction professionnelle\"};\r\n\r\n    private String[] categoriesRequise = {\"cours\", \"atelier\", \"séminaire\",\r\n            \"colloque\", \"conférence\", \"lecture dirigée\"};\r\n\r\n    public Verification(FormationContinue formation, String fichierSortie) throws Exception {\r\n        this.formationAVerifier = formation;\r\n        this.fichierErreur = new JSONObject();\r\n        JSONArray listeErreurs = new JSONArray();\r\n        fichierErreur.put(\"Complet\", true);\r\n        fichierErreur.put(\"Erreurs\", listeErreurs);\r\n        validationFinal(fichierSortie);\r\n    }\r\n\r\n    public JSONObject resultat(){\r\n        return fichierErreur;\r\n    }\r\n\r\n    public void validationCategories(JSONArray activites){\r\n        for (Object o : activites) {\r\n            JSONObject activite = (JSONObject) o;\r\n            if (!Arrays.asList(CATEGORIE).contains(activite.get(\"categorie\"))){\r\n                String nom = activite.get(\"categorie\").toString();\r\n                ajoutMsgErreur(\"La catégorie \" + nom\r\n                        + \" n'existe pas dans la banque de catégories\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public void validationDates() throws ParseException {\r\n        JSONArray activities = validationFormatDate();\r\n        for (Object o : activities) {\r\n            JSONObject activite = (JSONObject) o;\r\n            if(Arrays.asList(CATEGORIE).contains(activite.get(\"categorie\"))) {\r\n                String date = (String) activite.get(\"date\");\r\n                String categorie = (String) activite.get(\"categorie\");\r\n                if (validationDatesPeriode(date, categorie))\r\n                    categorieValide.add(categorie);\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean conditionValidDatePeriode(Date dateEntree,Date dateMin,\r\n                                                  Date dateMax,\r\n                                                  String categorie){\r\n        boolean bonneDate = true;\r\n        if (!(dateEntree.after(dateMin)) || !(dateEntree.before(dateMax))) {\r\n            ajoutMsgErreur(\"La date de la catégorie (\"+ categorie\r\n                    + \") n'est pas valide.\");\r\n            bonneDate = false;\r\n        }\r\n        return bonneDate;\r\n    }\r\n\r\n    public boolean validationDatesPeriode(String date, String categorie)\r\n            throws ParseException {\r\n        boolean bonneDate = true;\r\n        try {\r\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-M-dd\");\r\n            Date entree = sdf.parse(date);\r\n            Date min = sdf.parse(\"2020-04-01\");\r\n            Date max = sdf.parse(\"2022-04-01\");\r\n            bonneDate = conditionValidDatePeriode(entree,min, max,categorie);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return bonneDate;\r\n    }\r\n\r\n    public void validationHeuresTransferees(int pHeureMax, int pHeureMin){\r\n        long heures = formationAVerifier.getHeuresTransferees();\r\n        long heuresFixe = heures;\r\n            if (heures < pHeureMin)\r\n                formationAVerifier.setHeuresTransferees(pHeureMin);\r\n            if (heures > pHeureMax){\r\n                formationAVerifier.setHeuresTransferees(7);\r\n                ajoutMsgErreur(\"Le nombre d'heures transferees (\"+ heuresFixe\r\n                        +\") depasse la limite permise, seulement\" +\r\n                        \" 7h seront transferees\");\r\n            }\r\n    }\r\n\r\n    public void validationHeures(int pHeureMin, JSONArray pActiviteValide){\r\n        int heuresTotal = 0;\r\n        JSONObject activite;\r\n        for (Object o : pActiviteValide) {\r\n            activite = (JSONObject) o;\r\n            heuresTotal = ecrireHeuresTotal(heuresTotal, activite,\r\n                    pActiviteValide);\r\n        }\r\n        heuresTotal += formationAVerifier.getHeuresTransferees();\r\n        ecrireMsgErrHeureTotal(heuresTotal, pHeureMin );\r\n    }\r\n\r\n    public int ecrireHeuresTotal (int heuresTotal, JSONObject activite,\r\n                                  JSONArray pActiviteValide){\r\n        if(categorieValide.contains(activite.get(\"categorie\"))) {\r\n            heuresTotal += regarderCategorie(\r\n                    activite.get(\"categorie\").toString(), pActiviteValide,\r\n                    Integer.parseInt(activite.get(\"heures\").toString()));\r\n        }\r\n        return heuresTotal;\r\n    }\r\n\r\n    public void ecrireMsgErrHeureTotal (int heuresTotal, int pHeureMin){\r\n        if (heuresTotal < pHeureMin) {\r\n            ajoutMsgErreur(\"L'etudiant a complete seulement \"\r\n                    + (heuresTotal) + \" de 40h\");\r\n        }\r\n    }\r\n\r\n    public void validationHeuresCategorieMultiple(JSONArray activites){\r\n        int heures = 0;\r\n        for (Object o : activites) {\r\n            JSONObject activite = (JSONObject) o;\r\n            if(Arrays.asList(categoriesRequise).contains(\r\n                    activite.get(\"categorie\")))\r\n                heures += Integer.parseInt(activite.get(\"heures\").toString());\r\n        }\r\n        if(!validationNbHeuresActivite(17, heures))\r\n            ajoutMsgErreur(\"Les heures totales de l'ensemble des categories \" +\r\n                    \"n'est pas pas superieur a 17h\");\r\n    }\r\n\r\n    public boolean validationNbHeuresActivite(int pHeuresRequises,\r\n                                              int pHeuresCompletes){\r\n        if(pHeuresRequises <= pHeuresCompletes)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    public int calculHeuresMaxCategories(String categorie, int heureMax,\r\n                                         JSONArray activities){\r\n        int heures = 0;\r\n        for (Object o : activities) {\r\n            JSONObject activity = (JSONObject) o;\r\n            if(activity.get(\"categorie\").toString().contentEquals(categorie))\r\n                heures += Integer.parseInt(activity.get(\"heures\").toString());\r\n        }\r\n        if(validationNbHeuresActivite(heureMax, heures))\r\n            return heureMax;\r\n        return heures;\r\n    }\r\n\r\n    public boolean validationCycle(){\r\n        boolean bonCycle = true;\r\n        String cycle = formationAVerifier.getCycle();\r\n        if(!cycle.equals(\"2020-2022\")) {\r\n            ajoutMsgErreur(\"Le cycle de la formation n'est pas valide\");\r\n            bonCycle = false;\r\n        }\r\n        return bonCycle;\r\n    }\r\n\r\n    public void validationHeureFormat(){\r\n        for (Object o : formationAVerifier.getActivites()) {\r\n            JSONObject activity = (JSONObject) o;\r\n            if (!(activity.get(\"heures\").toString()).matches(\"^[0-9]+$\") ||\r\n                    Double.parseDouble((activity.get(\"heures\")).toString()) < 1)\r\n                ajoutMsgErreur(\"L'activité \" + activity.get(\"description\")\r\n                        + \" n'a pas un nombre valide d'heures\");\r\n        }\r\n    }\r\n\r\n    public JSONArray creationListeBonnesActivites(){\r\n        JSONArray bonneActivites = new JSONArray();\r\n        for (Object o : formationAVerifier.getActivites()){\r\n            JSONObject activite = (JSONObject) o;\r\n            if((activite.get(\"heures\").toString()).matches(\"^[0-9]+$\") &&\r\n                    Double.parseDouble((activite.get(\"heures\")).toString())\r\n                            >= 1) {\r\n                bonneActivites.add(activite);\r\n            }\r\n        }\r\n        return bonneActivites;\r\n    }\r\n\r\n    public JSONArray validationFormatDate(){\r\n        JSONArray activites = formationAVerifier.getActivites();\r\n        JSONArray dateValide = new JSONArray();\r\n        for (Object o : activites) {\r\n            JSONObject activite = (JSONObject) o;\r\n            if (((activite.get(\"date\").toString()).matches(\r\n                    \"[0-9]{4}[-]{1}[0-1]{1}[0-2]{1}[-]{1}[0-3]{1}[0-9]{1}\"))) {\r\n                dateValide.add(activite);\r\n            }else {\r\n                afficherErrFormatDate(activite);\r\n            }\r\n        }\r\n        return dateValide;\r\n    }\r\n\r\n    public void afficherErrFormatDate(JSONObject activite){\r\n        String categorie = (String) activite.get(\"categorie\");\r\n        ajoutMsgErreur(\"La date de la categorie (\"+ categorie\r\n                + \") n'est pas valide (pas bon format).\");\r\n\r\n    }\r\n\r\n    public void ajoutMsgErreur(String msg){\r\n        JSONArray erreur = (JSONArray)fichierErreur.get(\"Erreurs\");\r\n        erreur.add(msg);\r\n        fichierErreur.put(\"Erreurs\", erreur);\r\n        fichierErreur.put(\"Complet\", false);\r\n    }\r\n\r\n    public int regarderCategorie(String pCategorie, JSONArray pActiviteValide,\r\n                                 int pHeure){\r\n        if(pCategorie.equals(\"présentation\"))\r\n            pHeure = calculHeuresMaxCategories(\"présentation\", 23,\r\n                    pActiviteValide);\r\n        if(pCategorie.equals(\"groupe de discussion\"))\r\n            pHeure = calculHeuresMaxCategories(\"groupe de discussion\", 17,\r\n                    pActiviteValide);\r\n        if(pCategorie.equals(\"projet de recherche\"))\r\n            pHeure = calculHeuresMaxCategories(\"projet de recherche\", 23,\r\n                    pActiviteValide);\r\n        if(pCategorie.equals(\"redaction professionnelle\"))\r\n            pHeure = calculHeuresMaxCategories(\"redaction professionnelle\",\r\n                    17, pActiviteValide);\r\n\r\n        return pHeure;\r\n    }\r\n\r\n    public void validationFinal(String fichierSortie) throws Exception {\r\n        JSONArray activiteValide = creationListeBonnesActivites();\r\n        if(validationCycle()) {\r\n            validationHeureFormat();\r\n            validationDates();\r\n            validationCategories(activiteValide);\r\n            validationHeuresTransferees(7, 0);\r\n            validationHeures(40, activiteValide);\r\n            validationHeuresCategorieMultiple(activiteValide);\r\n        }\r\n        imprimer(fichierSortie);\r\n    }\r\n\r\n    /**\r\n     * Code inspire de la methode save() du projet json-lib-ex ecrit par\r\n     * Dogny, Gnagnely Serge\r\n     */\r\n    public void imprimer(String fichierSortie) throws Exception {\r\n        try (FileWriter f = new FileWriter(fichierSortie)) {\r\n            f.write(fichierErreur.toString(3));\r\n            f.flush();\r\n        }catch(IOException e){\r\n            throw new Exception(e.toString());\r\n        }\r\n    }\r\n}
===================================================================
diff --git a/projet-equipe14/src/Verification.java b/projet-equipe14/src/Verification.java
--- a/projet-equipe14/src/Verification.java	
+++ b/projet-equipe14/src/Verification.java	
@@ -200,7 +200,7 @@
         for (Object o : activites) {
             JSONObject activite = (JSONObject) o;
             if (((activite.get("date").toString()).matches(
-                    "[0-9]{4}[-]{1}[0-1]{1}[0-2]{1}[-]{1}[0-3]{1}[0-9]{1}"))) {
+                    "[0-9]{4}[-]{1}[0-1]{1}[0-9]{1}[-]{1}[0-3]{1}[0-9]{1}"))) {
                 dateValide.add(activite);
             }else {
                 afficherErrFormatDate(activite);
